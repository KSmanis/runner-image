#!/usr/bin/env python3
from __future__ import annotations

import argparse
import os.path
import subprocess

HERE = os.path.dirname(__file__)


def _push(
        *,
        tag: str,
        hostname: str,
        username: str,
        password: str,
        prefix: str,
) -> None:
    subprocess.run(
        (
            'docker', 'login', '--username', username, '--password-stdin',
            hostname,
        ),
        input=password.encode(),
        check=True,
    )

    tag_image, _, _ = tag.partition(':')
    for target_tag in (f'{prefix}/{tag}', f'{prefix}/{tag_image}:latest'):
        subprocess.check_call(('docker', 'tag', tag, target_tag))
        subprocess.check_call(('docker', 'push', target_tag))


def _inspect(tag: str) -> bytes:
    cmd = ('docker', 'image', 'inspect', tag, '--format', '{{.Id}}')
    return subprocess.check_output(cmd)


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('git_dir')
    parser.add_argument('tag')
    args = parser.parse_args()

    push = _inspect(args.tag)
    target = _inspect('ghcr.io/pre-commit-ci/runner-image:latest')

    if push == target:
        print('skipping push (up to date)')
        return 0

    _push(
        tag=args.tag,
        hostname='docker.io',
        username='precommitci',
        password=os.environ['DOCKERHUB_TOKEN'],
        prefix='precommitci',
    )

    _push(
        tag=args.tag,
        hostname='ghcr.io',
        username='pre-commit-ci-bot',
        password=os.environ['GHCR_TOKEN'],
        prefix='ghcr.io/pre-commit-ci',
    )

    cmd = (os.path.join(HERE, 'info'), args.tag)
    with open(os.path.join(args.git_dir, 'versions.md'), 'wb') as f:
        subprocess.check_call(cmd, stdout=f)

    git = (
        'git',
        '-c', 'user.name=github-actions',
        '-c', 'user.email=41898282+github-actions[bot]@users.noreply.github.com',  # noqa: E501
        '-C', args.git_dir,
    )
    subprocess.check_call((*git, 'add', '.'))
    msg = f'update versions for {args.tag}'
    subprocess.check_call((*git, 'commit', '-q', '-m', msg))
    subprocess.check_call((*git, 'tag', args.tag.replace(':', '_')))
    subprocess.check_call((*git, 'push', '-q', '--tags', 'origin', 'HEAD'))

    return 0


if __name__ == '__main__':
    exit(main())
