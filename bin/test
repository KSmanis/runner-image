#!/usr/bin/env python3
from __future__ import annotations

import argparse
import os
import subprocess
import tempfile
import time


PYTHON_HOOKS = '''\
repos:
-   repo: local
    hooks:
    -   id: flake8-local
        name: flake8-local
        language: python
        entry: flake8
        additional_dependencies: [flake8]
        types: [python]
    -   id: flake8-local-lang
        name: flake8-local
        language: python
        entry: flake8
        additional_dependencies: [flake8]
        types: [python]
        language_version: python2.7
'''


def test_can_run_python_tools(tag: str, pc: str, *, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    with tempfile.TemporaryDirectory() as tmpdir:
        subprocess.check_call(('git', 'init', tmpdir))
        with open(os.path.join(tmpdir, '.pre-commit-config.yaml'), 'w') as f:
            f.write(PYTHON_HOOKS)
        with open(os.path.join(tmpdir, 't.py'), 'w') as f:
            f.write("print('hello hello world')\n")
        subprocess.check_call(('git', '-C', tmpdir, 'add', '.'))

        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            *userns,
            '--volume', f'{tmpdir}:/git:ro',
            '--volume', f'{pc}:/pc:rw',
            '--workdir', '/git',
            tag, 'python3', '-mpre_commit', 'install-hooks',
        ))
        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            *userns,
            '--volume', f'{tmpdir}:/git:rw',
            '--volume', f'{pc}:/pc:ro',
            '--workdir', '/git',
            tag, 'python3', '-mpre_commit', 'run', '--all-files',
        ))


def test_considers_system_ruby_suitable(tag: str) -> None:
    output = subprocess.check_output((
        'docker', 'run', '--rm',
        tag, 'python3', '-c',
        'import pre_commit.languages.ruby;'
        'print(pre_commit.languages.ruby.get_default_version())',
    ))
    assert output == b'system\n', output


def test_considers_system_node_suitable(tag: str) -> None:
    output = subprocess.check_output((
        'docker', 'run', '--rm',
        tag, 'python3', '-c',
        'import pre_commit.languages.node;'
        'print(pre_commit.languages.node.get_default_version())',
    ))
    assert output == b'system\n', output


NODE_HOOK = '''\
repos:
-   repo: local
    hooks:
    -   id: prettier
        name: prettier
        entry: prettier
        types: [javascript]
        language: node
        additional_dependencies: [prettier@v2.1.2]
'''


def test_can_run_node_hook(tag: str, pc: str, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    with tempfile.TemporaryDirectory() as tmpdir:
        subprocess.check_call(('git', 'init', tmpdir))
        with open(os.path.join(tmpdir, '.pre-commit-config.yaml'), 'w') as f:
            f.write(NODE_HOOK)
        with open(os.path.join(tmpdir, 't.js'), 'w') as f:
            f.write("console.log('hello world');")
        subprocess.check_call(('git', '-C', tmpdir, 'add', '.'))

        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            *userns,
            '--volume', f'{tmpdir}:/git:ro',
            '--volume', f'{pc}:/pc:rw',
            '--workdir', '/git',
            tag, 'python3', '-mpre_commit', 'install-hooks',
        ))
        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            *userns,
            '--volume', f'{tmpdir}:/git:rw',
            '--volume', f'{pc}:/pc:ro',
            '--workdir', '/git',
            tag, 'python3', '-mpre_commit', 'run', '--all-files',
        ))


def test_can_install_ffi_gem(tag: str) -> None:
    subprocess.check_call((
        'docker', 'run', '--rm', tag,
        'gem', 'install', '--install-dir=/tmp', '--no-document', 'ffi',
    ))


GO_HOOK = '''\
repos:
-   repo: https://github.com/golangci/golangci-lint
    rev: v1.33.0
    hooks:
    -   id: golangci-lint
'''

GOLANGCI_LINT_CONFIG = '''\
linters:
  disable-all: true
  enable:
    - gofmt
run:
  deadline: 30s
'''


def test_can_run_go_hook(tag: str, pc: str, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    with tempfile.TemporaryDirectory() as tmpdir:
        subprocess.check_call(('git', 'init', tmpdir))
        with open(os.path.join(tmpdir, '.pre-commit-config.yaml'), 'w') as f:
            f.write(GO_HOOK)
        with open(os.path.join(tmpdir, '.golangci.yml'), 'w') as f:
            f.write(GOLANGCI_LINT_CONFIG)
        with open(os.path.join(tmpdir, 'pkg.go'), 'w') as f:
            f.write('package somepkg\n')
        with open(os.path.join(tmpdir, 'go.mod'), 'w') as f:
            f.write('module github.com/example/mod\n\ngo 1.15\n')
        subprocess.check_call(('git', '-C', tmpdir, 'add', '.'))

        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            *userns,
            '--volume', f'{tmpdir}:/git:ro',
            '--volume', f'{pc}:/pc:rw',
            '--workdir', '/git',
            tag, 'python3', '-mpre_commit', 'install-hooks',
        ))
        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            *userns,
            '--volume', f'{tmpdir}:/git:rw',
            '--volume', f'{pc}:/pc:ro',
            '--workdir', '/git',
            tag, 'python3', '-mpre_commit',
            'run', '--all-files', '--show-diff-on-failure',
        ))


RUST_HOOK = '''\
repos:
-   repo: local
    hooks:
    -   id: rust-local
        name: rust-local
        language: rust
        entry: shellharden
        types: [rust]
        additional_dependencies: [cli:shellharden:3.1.0]
'''

CARGO_TOML = '''\
[package]
name = "testing"
version = "0.1.0"
'''


def test_can_run_rust_hook(tag: str, pc: str, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    with tempfile.TemporaryDirectory() as tmpdir:
        subprocess.check_call(('git', 'init', tmpdir))
        with open(os.path.join(tmpdir, '.pre-commit-config.yaml'), 'w') as f:
            f.write(RUST_HOOK)
        with open(os.path.join(tmpdir, 'Cargo.toml'), 'w') as f:
            f.write(CARGO_TOML)
        os.mkdir(os.path.join(tmpdir, 'src'))
        with open(os.path.join(tmpdir, 'src', 'main.rs'), 'w') as f:
            f.write('fn main() {}')
        subprocess.check_call(('git', '-C', tmpdir, 'add', '.'))

        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            *userns,
            '--volume', f'{tmpdir}:/git:ro',
            '--volume', f'{pc}:/pc:rw',
            '--workdir', '/git',
            tag, 'python3', '-mpre_commit', 'install-hooks',
        ))
        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            *userns,
            '--volume', f'{tmpdir}:/git:rw',
            '--volume', f'{pc}:/pc:ro',
            '--workdir', '/git',
            tag, 'python3', '-mpre_commit',
            'run', '--all-files', '--show-diff-on-failure',
        ))


HADOLINT_DOCKERFILE = '''\
FROM hadolint/hadolint:latest-alpine
'''

DOCKER_REPO_HOOK = '''\
-   id: hadolint-docker
    name: hadolint (via Docker)
    language: docker
    entry: hadolint
    types: [dockerfile]
'''

DOCKER_HOOK = '''\
repos:
-   repo: /git
    rev: v1.0
    hooks:
    -   id: hadolint-docker
'''

DOCKER_IMAGE_HOOK = '''\
repos:
-   repo: local
    hooks:
    -   id: hadolint-docker-image
        name: hadolint (via Docker image)
        language: docker_image
        entry: hadolint/hadolint:latest-alpine hadolint
        types: [dockerfile]
'''


def test_can_run_docker_hook(tag: str, pc: str, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    with tempfile.TemporaryDirectory() as tmpdir:
        subprocess.check_call(('git', 'init', tmpdir))
        with open(os.path.join(tmpdir, '.pre-commit-config.yaml'), 'w') as f:
            f.write(DOCKER_HOOK)
        with open(os.path.join(tmpdir, '.pre-commit-hooks.yaml'), 'w') as f:
            f.write(DOCKER_REPO_HOOK)
        with open(os.path.join(tmpdir, 'Dockerfile'), 'w') as f:
            f.write(HADOLINT_DOCKERFILE)
        subprocess.check_call(('git', '-C', tmpdir, 'add', '.'))
        subprocess.check_call(
            (
                'git', '-C', tmpdir, '-c', 'user.email=foo@bar.com',
                'commit', '-m', 'Initial commit',
            ),
        )
        subprocess.check_call(
            ('git', '-C', tmpdir, 'tag', 'v1.0'),
        )

        docker_gid = os.stat('/var/run/docker.sock').st_gid
        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            '--group-add', f'{docker_gid}',
            *userns,
            '--volume', f'{tmpdir}:/git:ro',
            '--volume', f'{pc}:/pc:rw',
            '--volume', '/var/run/docker.sock:/var/run/docker.sock',
            '--workdir', '/git',
            tag, 'python3', '-mpre_commit', 'install-hooks',
        ))
        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            '--group-add', f'{docker_gid}',
            *userns,
            '--volume', f'{tmpdir}:{tmpdir}:rw',
            '--volume', f'{pc}:/pc:ro',
            '--volume', '/var/run/docker.sock:/var/run/docker.sock',
            '--workdir', f'{tmpdir}',
            tag, 'python3', '-mpre_commit',
            'run', '--all-files', '--show-diff-on-failure',
        ))


def test_can_run_docker_image_hook(tag: str, pc: str, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    with tempfile.TemporaryDirectory() as tmpdir:
        subprocess.check_call(('git', 'init', tmpdir))
        with open(os.path.join(tmpdir, '.pre-commit-config.yaml'), 'w') as f:
            f.write(DOCKER_IMAGE_HOOK)
        with open(os.path.join(tmpdir, 'Dockerfile'), 'w') as f:
            f.write(HADOLINT_DOCKERFILE)
        subprocess.check_call(('git', '-C', tmpdir, 'add', '.'))

        docker_gid = os.stat('/var/run/docker.sock').st_gid
        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            '--group-add', f'{docker_gid}',
            *userns,
            '--volume', f'{tmpdir}:/git:ro',
            '--volume', f'{pc}:/pc:rw',
            '--volume', '/var/run/docker.sock:/var/run/docker.sock',
            '--workdir', '/git',
            tag, 'python3', '-mpre_commit', 'install-hooks',
        ))
        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            '--group-add', f'{docker_gid}',
            *userns,
            '--volume', f'{tmpdir}:{tmpdir}:rw',
            '--volume', f'{pc}:/pc:ro',
            '--volume', '/var/run/docker.sock:/var/run/docker.sock',
            '--workdir', f'{tmpdir}',
            tag, 'python3', '-mpre_commit',
            'run', '--all-files', '--show-diff-on-failure',
        ))


def test_can_run_dind_hook(tag: str, pc: str, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    with tempfile.TemporaryDirectory() as tmpdir:
        subprocess.check_call(('git', 'init', tmpdir))
        with open(os.path.join(tmpdir, '.pre-commit-config.yaml'), 'w') as f:
            f.write(DOCKER_HOOK)
        with open(os.path.join(tmpdir, '.pre-commit-hooks.yaml'), 'w') as f:
            f.write(DOCKER_REPO_HOOK)
        with open(os.path.join(tmpdir, 'Dockerfile'), 'w') as f:
            f.write(HADOLINT_DOCKERFILE)
        subprocess.check_call(('git', '-C', tmpdir, 'add', '.'))
        subprocess.check_call(
            (
                'git', '-C', tmpdir, '-c', 'user.email=foo@bar.com',
                'commit', '-m', 'Initial commit',
            ),
        )
        subprocess.check_call(
            ('git', '-C', tmpdir, 'tag', 'v1.0'),
        )

        try:
            subprocess.check_call(
                ('docker', 'network', 'create', 'docker-dind'),
            )
            subprocess.check_call((
                'docker', 'run', '--rm',
                '--detach', '--privileged',
                '--name', 'docker-dind',
                '--env', 'DOCKER_TLS_CERTDIR=/certs',
                '--network', 'docker-dind',
                '--network-alias', 'docker',
                '--volume', f'{tmpdir}:/git',
                '--volume', 'docker-certs:/certs/client',
                'docker:dind',
            ))
            for _ in range(60):
                try:
                    subprocess.check_call((
                        'docker', 'exec', 'docker-dind',
                        'nc', '-z', '127.0.0.1', '2376',
                    ))
                    break
                except subprocess.CalledProcessError:
                    print('Waiting for Docker-in-Docker to spin up...')
                    time.sleep(1)
            subprocess.check_call((
                'docker', 'run', '--rm',
                '--user', f'{os.getuid()}:{os.getgid()}',
                *userns,
                '--env', 'DOCKER_HOST=tcp://docker:2376',
                '--env', 'DOCKER_CERT_PATH=/certs/client',
                '--env', 'DOCKER_TLS_VERIFY=1',
                '--network', 'docker-dind',
                '--volume', f'{tmpdir}:/git:ro',
                '--volume', f'{pc}:/pc:rw',
                '--volume', 'docker-certs:/certs/client:ro',
                '--workdir', '/git',
                tag, 'python3', '-mpre_commit', 'install-hooks',
            ))
            subprocess.check_call((
                'docker', 'run', '--rm',
                '--user', f'{os.getuid()}:{os.getgid()}',
                *userns,
                '--env', 'DOCKER_HOST=tcp://docker:2376',
                '--env', 'DOCKER_CERT_PATH=/certs/client',
                '--env', 'DOCKER_TLS_VERIFY=1',
                '--network', 'docker-dind',
                '--volume', f'{tmpdir}:/git:rw',
                '--volume', f'{pc}:/pc:ro',
                '--volume', 'docker-certs:/certs/client:ro',
                '--workdir', '/git',
                tag, 'python3', '-mpre_commit',
                'run', '--all-files', '--show-diff-on-failure',
            ))
        finally:
            subprocess.check_call(('docker', 'stop', 'docker-dind'))
            subprocess.check_call(('docker', 'volume', 'rm', 'docker-certs'))
            subprocess.check_call(('docker', 'network', 'rm', 'docker-dind'))


def test_can_run_dind_image_hook(tag: str, pc: str, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    with tempfile.TemporaryDirectory() as tmpdir:
        subprocess.check_call(('git', 'init', tmpdir))
        with open(os.path.join(tmpdir, '.pre-commit-config.yaml'), 'w') as f:
            f.write(DOCKER_IMAGE_HOOK)
        with open(os.path.join(tmpdir, 'Dockerfile'), 'w') as f:
            f.write(HADOLINT_DOCKERFILE)
        subprocess.check_call(('git', '-C', tmpdir, 'add', '.'))

        try:
            subprocess.check_call(
                ('docker', 'network', 'create', 'docker-dind'),
            )
            subprocess.check_call((
                'docker', 'run', '--rm',
                '--detach', '--privileged',
                '--name', 'docker-dind',
                '--env', 'DOCKER_TLS_CERTDIR=/certs',
                '--network', 'docker-dind',
                '--network-alias', 'docker',
                '--volume', f'{tmpdir}:/git',
                '--volume', 'docker-certs:/certs/client',
                'docker:dind',
            ))
            for _ in range(60):
                try:
                    subprocess.check_call((
                        'docker', 'exec', 'docker-dind',
                        'nc', '-z', '127.0.0.1', '2376',
                    ))
                    break
                except subprocess.CalledProcessError:
                    print('Waiting for Docker-in-Docker to spin up...')
                    time.sleep(1)
            subprocess.check_call((
                'docker', 'run', '--rm',
                '--user', f'{os.getuid()}:{os.getgid()}',
                *userns,
                '--volume', f'{tmpdir}:/git:ro',
                '--volume', f'{pc}:/pc:rw',
                '--workdir', '/git',
                tag, 'python3', '-mpre_commit', 'install-hooks',
            ))
            subprocess.check_call((
                'docker', 'run', '--rm',
                '--user', f'{os.getuid()}:{os.getgid()}',
                *userns,
                '--env', 'DOCKER_HOST=tcp://docker:2376',
                '--env', 'DOCKER_CERT_PATH=/certs/client',
                '--env', 'DOCKER_TLS_VERIFY=1',
                '--network', 'docker-dind',
                '--volume', f'{tmpdir}:/git:rw',
                '--volume', f'{pc}:/pc:ro',
                '--volume', 'docker-certs:/certs/client:ro',
                '--workdir', '/git',
                tag, 'python3', '-mpre_commit',
                'run', '--all-files', '--show-diff-on-failure',
            ))
        finally:
            subprocess.check_call(('docker', 'stop', 'docker-dind'))
            subprocess.check_call(('docker', 'volume', 'rm', 'docker-certs'))
            subprocess.check_call(('docker', 'network', 'rm', 'docker-dind'))


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('--podman', action='store_true')
    parser.add_argument('tag')
    args = parser.parse_args()

    with tempfile.TemporaryDirectory() as pc:
        print(' can run python tools '.center(79, '='), flush=True)
        test_can_run_python_tools(args.tag, pc, podman=args.podman)
        print(' considers system ruby suitable '.center(79, '='), flush=True)
        test_considers_system_ruby_suitable(args.tag)
        print(' condiders system node suitable '.center(79, '='), flush=True)
        test_considers_system_node_suitable(args.tag)
        print(' can run node hook '.center(79, '='), flush=True)
        test_can_run_node_hook(args.tag, pc, podman=args.podman)
        print(' can install ffi gem '.center(79, '='), flush=True)
        test_can_install_ffi_gem(args.tag)
        print(' can run go hooks '.center(79, '='), flush=True)
        test_can_run_go_hook(args.tag, pc, podman=args.podman)
        print(' can run rust hooks '.center(79, '='), flush=True)
        test_can_run_rust_hook(args.tag, pc, podman=args.podman)
        print(' can run docker hook '.center(79, '='), flush=True)
        test_can_run_docker_hook(args.tag, pc, podman=args.podman)
        print(' can run docker image hook '.center(79, '='), flush=True)
        test_can_run_docker_image_hook(args.tag, pc, podman=args.podman)
        print(' can run dind hook '.center(79, '='), flush=True)
        test_can_run_dind_hook(args.tag, pc, podman=args.podman)
        print(' can run dind image hook '.center(79, '='), flush=True)
        test_can_run_dind_image_hook(args.tag, pc, podman=args.podman)

    return 0


if __name__ == '__main__':
    exit(main())
